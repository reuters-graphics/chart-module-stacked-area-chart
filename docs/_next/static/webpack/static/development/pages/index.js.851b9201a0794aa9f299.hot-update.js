webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @reuters-graphics/graphics-atlas-client */ \"./node_modules/@reuters-graphics/graphics-atlas-client/dist/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar client = new _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_11___default.a();\n\nvar StackedAreaChart = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(StackedAreaChart, _ChartComponent);\n\n  var _super = _createSuper(StackedAreaChart);\n\n  function StackedAreaChart() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, StackedAreaChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      stroke: '#2f353f',\n      stroke_width: 0.5,\n      fills: ['rgba(255,255,255,0.9)', 'rgba(255,255,255,0.8)', 'rgba(255,255,255,0.7)', 'rgba(255,255,255,0.55)', 'rgba(255,255,255,0.45)', 'rgba(255,255,255,0.25)'],\n      margin: {\n        left: 10,\n        right: 35,\n        top: 20,\n        bottom: 20\n      },\n      height: 300,\n      avg_days: 7,\n      locale: 'en',\n      absolute: false,\n      highlight_variable: null,\n      highlight_color: '#fce587',\n      line_height: 1.2,\n      chart_formats: {\n        number: ',',\n        percent: '.0%',\n        date: '%b'\n      }\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(StackedAreaChart, [{\n    key: \"draw\",\n    value: function draw() {\n      var dateParse = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].timeParse('%Y-%m-%d');\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10___default.a(props.locale);\n      var formatPer = locale.format(props.chart_formats.percent);\n      var formatNum = locale.format(props.chart_formats.number);\n      var dateFormat = locale.formatTime(props.chart_formats.date);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var reshapedData = [];\n      var regionList = Object(lodash__WEBPACK_IMPORTED_MODULE_9__[\"uniq\"])(data.map(function (d) {\n        return d.region;\n      }));\n      var dateWise = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].nest().key(function (d) {\n        return d.date;\n      }).entries(data);\n      dateWise.forEach(function (d, index) {\n        var obj = {\n          date: dateParse(d.key),\n          total: _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].sum(d.values, function (e) {\n            return e.count;\n          })\n        };\n        regionList.forEach(function (e) {\n          return obj[e] = 0;\n        });\n        d.values.forEach(function (e) {\n          obj[e.region] = e.count;\n        });\n        reshapedData.push(obj);\n      });\n      reshapedData = reshapedData.sort(function (a, b) {\n        return _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].descending(a.date, b.date);\n      });\n      reshapedData.forEach(function (d, index) {\n        regionList.forEach(function (e) {\n          d['mean_' + e] = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(reshapedData.slice(index, index + props.avg_days), function (f) {\n            return +f[e];\n          }); // avg calc\n\n          if (!d['mean_' + e] || d['mean_' + e] < 0) {\n            d['mean_' + e] = 0;\n          }\n\n          if (index === 0) {\n            d['mean_' + e] = d[e];\n          }\n        });\n        d.mean_total = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(reshapedData.slice(index, index + props.avg_days), function (f) {\n          return +f.total;\n        }); // avg calc\n\n        if (!d.mean_total) {\n          d.mean_total = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(reshapedData.slice(0, index), function (f) {\n            return +f.total;\n          });\n        }\n\n        if (index === 0) {\n          d.mean_total = d.total;\n        }\n      }); // reshapedData = reshapedData.shift();\n\n      var maxData = reshapedData[1];\n      var meanList = regionList.map(function (d) {\n        return 'mean_' + d;\n      });\n      regionList = Object(lodash__WEBPACK_IMPORTED_MODULE_9__[\"sortBy\"])(meanList, function (d) {\n        return +maxData[d];\n      });\n      var seriesDeath = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].stack().keys(regionList)(reshapedData);\n      var scaleX = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleTime().range([0, width - props.margin.left - props.margin.right]).domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(reshapedData, function (d) {\n        return d.date;\n      }));\n      var scaleYPer = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().range([props.height - props.margin.top - props.margin.bottom, 0]).domain([0, 1]);\n      var scaleYNum = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().range([props.height - props.margin.top - props.margin.bottom, 0]).domain([0, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].max(reshapedData, function (d) {\n        return d.mean_total;\n      })]);\n      var areaDeath = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].area().x(function (d) {\n        return scaleX(d.data.date);\n      }).y0(function (d) {\n        return props.absolute ? scaleYNum(d[0]) : scaleYPer(d[0] / d.data.mean_total);\n      }).y1(function (d) {\n        return props.absolute ? scaleYNum(d[1]) : scaleYPer(d[1] / d.data.mean_total);\n      }).curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].curveMonotoneX);\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750);\n      var labelContainer = this.selection().appendSelect('div.label-mother-container').appendSelect('div.label-container');\n      var textUpdate = labelContainer.selectAll('.label-text').data(seriesDeath.reverse(), function (d, i) {\n        return d.key;\n      }).call(function (update) {\n        return update.transition(transition);\n      }).attr('class', function (d, i) {\n        if (d.key.split('_')[1] === props.highlight_variable) {\n          return 'highlight label-text';\n        } else {\n          return 'label-text';\n        }\n      }).style('top', function (d, i) {\n        return i * props.line_height + 'rem';\n      }); // enter\n\n      textUpdate.enter().append('div').attr('class', function (d, i) {\n        if (d.key.split('_')[1] === props.highlight_variable) {\n          return 'highlight label-text';\n        } else {\n          return 'label-text';\n        }\n      }).style('top', function (d, i) {\n        return i * props.line_height + 'rem';\n      }).text(function (d) {\n        return client.getRegion(d.key.split('_')[1]).translations[props.locale];\n      }).call(function (enter) {\n        return enter.transition(transition);\n      }); // exit\n\n      textUpdate.exit().call(function (exit) {\n        return exit.transition(transition);\n      }).remove();\n      var highlightIndex;\n\n      if (props.highlight_variable) {\n        highlightIndex = Object(lodash__WEBPACK_IMPORTED_MODULE_9__[\"findIndex\"])(seriesDeath, function (d) {\n          return d.key.split('_')[1] === props.highlight_variable;\n        });\n      } else {\n        highlightIndex = -1;\n      }\n\n      var labelBox = labelContainer.selectAll('.label-box').data(props.fills).style('background', function (d, i) {\n        if (i === highlightIndex) {\n          return props.highlight_color;\n        } else {\n          return props.fills[i] ? props.fills[i] : '#000';\n        }\n      });\n      labelBox.enter().append('div').attr('class', 'label-box').style('top', function (d, i) {\n        return i * props.line_height + 'rem';\n      }).style('background', function (d, i) {\n        if (i === highlightIndex) {\n          return props.highlight_color;\n        } else {\n          return props.fills[i] ? props.fills[i] : '#000';\n        }\n      }).merge(labelBox);\n      var g = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height).appendSelect('g').attr('transform', \"translate(\".concat(props.margin.left, \", \").concat(props.margin.top, \")\"));\n      var areaChartPaths = g.appendSelect('g.areas').selectAll('g.area').data(seriesDeath).join('g').attr('class', 'area');\n      areaChartPaths.append('path');\n      areaChartPaths.select('path').attr('class', function (d) {\n        if (d.key.split('_')[1] === props.highlight_variable) {\n          return d.key + ' highlight';\n        } else {\n          return d.key;\n        }\n      }).attr('fill', function (d, i) {\n        if (d.key.split('_')[1] === props.highlight_variable) {\n          return props.highlight_color;\n        } else {\n          return props.fills[i] ? props.fills[i] : '#000';\n        }\n      }).transition(transition).attr('fill', function (d, i) {\n        if (d.key.split('_')[1] === props.highlight_variable) {\n          return props.highlight_color;\n        } else {\n          return props.fills[i] ? props.fills[i] : '#000';\n        }\n      }).attr('d', areaDeath).attr('stroke', props.stroke).attr('stroke-width', props.stroke_width);\n      g.appendSelect('g.axis--y.axis').attr('transform', \"translate(\".concat(width - props.margin.right - props.margin.left, \",0)\")).transition(transition).attr('transform', \"translate(\".concat(width - props.margin.right - props.margin.left, \",0)\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisRight(props.absolute ? scaleYNum : scaleYPer).ticks(3).tickFormat(props.absolute ? formatNum : formatPer));\n      g.appendSelect('g.axis--x.axis').attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom - props.margin.top, \")\")).transition(transition).attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom - props.margin.top, \")\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(scaleX).ticks(4).tickFormat(dateFormat));\n      return this;\n    }\n  }]);\n\n  return StackedAreaChart;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (StackedAreaChart);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})